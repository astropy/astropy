.. _whatsnew-7.2:

**************************
What's New in Astropy 7.2?
**************************

Overview
========

Astropy 7.2 is a release that adds significant new functionality since
the 7.1 release.

In particular, this release includes:

* ...
* ...
* ...

In addition to these major changes, Astropy v7.2 includes a large number of
smaller improvements and bug fixes, which are described in the :ref:`changelog`.
By the numbers:

* X issues have been closed since v7.1
* X pull requests have been merged since v7.1
* X distinct people have contributed code

Full change log
===============

To see a detailed list of all changes in version v7.2, including changes in
API, please see the :ref:`changelog`.

Cosmology
=========
A traits class in cosmology for the Hubble Parameter. Which provides H0 as a trait along with additional methods.
The :mod:`~astropy.cosmology.traits` module provides reusable components, called
:term:`traits <trait type>`, that encapsulate specific cosmological properties or
behaviors. For example, the :class:`~astropy.cosmology.traits.HubbleParameter` trait
provides the Hubble constant (``H0``) and related methods, while
:class:`~astropy.cosmology.traits.ScaleFactor` and
:class:`~astropy.cosmology.traits.TemperatureCMB` provide the scale factor and the
temperature or the CMB, respectively.
Here is an example of how to use the
:class:`~astropy.cosmology.traits.HubbleParameter`,
:class:`~astropy.cosmology.traits.ScaleFactor`, and
:class:`~astropy.cosmology.traits.TemperatureCMB` traits in a custom cosmology class:

>>> import astropy.units as u
>>> from astropy.cosmology.traits import HubbleParameter, ScaleFactor, TemperatureCMB
>>> from astropy.cosmology import Cosmology
>>>
>>> class CustomCosmology(Cosmology, HubbleParameter, ScaleFactor, TemperatureCMB):
...     def __init__(self, Om0, Ode0, H0=70, Tcmb0=2.725):
...         self.H0 = H0 << (u.km / u.s / u.Mpc)
...         self.Om0 = Om0
...         self.Ode0 = Ode0
...         self.Tcmb0 = u.Quantity(Tcmb0, "K")
...         super().__init__()
...
...     is_flat = False
...     # Additional custom methods and properties can be added here

>>> cosmo = CustomCosmology(H0=70, Om0=0.3, Ode0=0.7)
>>> cosmo.H0
<Quantity 70. km / (Mpc s)>
>>> cosmo.scale_factor(0)
<Quantity 1.>
>>> cosmo.Tcmb(1)
<Quantity 5.45 K>
>>> cosmo.hubble_time
<Quantity 13.96846031 Gyr>

By combining these traits, you can easily construct custom cosmology classes with
precisely the features you need, without having to reimplement common functionality.
