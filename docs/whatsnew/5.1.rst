.. _whatsnew-5.1:

**************************
What's New in Astropy 5.1?
**************************

Overview
========

Astropy 5.1 is a major release that adds significant new functionality since
the 5.0 LTS release.

In particular, this release includes:

* :ref:`whatsnew-5.1-cosmology`
* :ref:`whatsnew-doppler-redshift-eq`
* :ref:`whatsnew-io-ascii-converters`
* :ref:`whatsnew-io-ascii-fixed-width-ecsv`
* :ref:`whatsnew-structured-columns`
* :ref:`whatsnew-fitters`
* :ref:`whatsnew-iers-handling`

.. _whatsnew-5.1-cosmology:

Updates to ``Cosmology``
========================

:class:`~astropy.cosmology.Cosmology` is now an abstract base class,
and subclasses must override the abstract property ``is_flat``.
For :class:`~astropy.cosmology.FLRW`, ``is_flat`` checks that ``Ok0=0`` and
``Otot0=1``.

Astropy v5.0 introduced Cosmological equivalency -- with method
:meth:`~astropy.cosmology.Cosmology.is_equivalent` -- where two cosmologies may
be equivalent even if not of the same class. For example, an instance of
:class:`~astropy.cosmology.LambdaCDM` might have :math:`\Omega_0=1` and
:math:`\Omega_k=0` and therefore be flat, like ``FlatLambdaCDM``.
Now the keyword argument ``format`` is added to extend the notion of
equivalence to any Python object that can be converted to a Cosmology.

    >>> from astropy.cosmology import Planck18
    >>> tbl = Planck18.to_format("astropy.table")
    >>> Planck18.is_equivalent(tbl, format=True)
    True

The list of valid formats, e.g. the Table in this example, may be
checked with ``Cosmology.from_format.list_formats()``


A new property ``nonflat`` has been added to flat cosmologies
(:class:`astropy.cosmology.FlatCosmologyMixin` subclasses) to get an equivalent
cosmology, but of the corresponding non-flat class.

    >>> Planck18.nonflat
    LambdaCDM(name="Planck18", H0=67.66 km / (Mpc s), ...


:meth:`astropy.cosmology.FlatCosmologyMixin.clone` has been enhanced to allow
for flat cosmologies to clone on the equivalent non-flat cosmology. For example,

    >>> Planck18.clone(to_nonflat=True, Ode0=1)
    LambdaCDM(name="Planck18 (modified)", H0=67.66 km / (Mpc s), Om0=0.30966, Ode0=1.0, ...


.. _whatsnew-doppler-redshift-eq:

``doppler_redshift`` equivalency
================================

New :func:`astropy.units.equivalencies.doppler_redshift` is added to
provide conversion between Doppler redshift and radial velocity.

.. _whatsnew-io-ascii-converters:

Specifying data types when reading ASCII tables
===============================================

The syntax for specifying the data type of columns when reading a table using
:func:`astropy.io.ascii.read` has been simplified considerably. For instance,
to force every column in a table to be read as a ``float`` you can now do:

    >>> from astropy.table import Table
    >>> t = Table.read('table.dat', format='ascii', converters={'*': float})  # doctest: +SKIP

Previously, doing the same data type specification required using the
:func:`~astropy.io.ascii.convert_numpy` function and providing the ``dict``
value as a ``list`` even for only one element::

    >>> from astropy.io.ascii import convert_numpy
    >>> t = Table.read('table.dat', format='ascii',
    ...                converters={'*': [convert_numpy(float)]})  # doctest: +SKIP

Note that the previous syntax is still supported for backwards compatibility
and there is no intent to remove this. See :ref:`io-ascii-read-converters` for
details.

.. _whatsnew-io-ascii-fixed-width-ecsv:

Fixed width ASCII table output with units and meta-data
=======================================================

A long-time feature request in astropy has been to write tables in a
human-readable fixed-width format that also includes column units and
potentially other meta-data. This is now available in as a fixed-width variant
of the ECSV format which captures all units, data types and other meta-data in
the header. This is done as a new format name ``'ecsv_fixed_width'`` to make it
clear that this is not strictly ECSV although the output is readable by the
Python ECSV reader for both space and comma-delimited outputs.

Example::

    >>> from astropy.table import Table
    >>> import astropy.units as u
    >>> from astropy.io import ascii
    >>> t = Table()
    >>> t['velocity'] = [1, 2, 30000, -5] * u.m / u.s
    >>> t['text'] = ['x z', 'y,z', 'z, x', 'hello!']
    >>> t['number'] = [1.0, -20000.0, 3.0, 4.0]

    >>> ascii.write(t, format='ecsv_fixed_width')
    # %ECSV 1.0
    # ---
    # datatype:
    # - {name: velocity, unit: m / s, datatype: float64}
    # - {name: text, datatype: string}
    # - {name: number, datatype: float64}
    # schema: astropy-2.0
    velocity    text    number
         1.0   "x z"       1.0
         2.0     y,z  -20000.0
     30000.0  "z, x"       3.0
        -5.0  hello!       4.0

.. _whatsnew-structured-columns:

Structured Columns
==================

Columns which are ``numpy`` structured arrays are now fully supported,
effectively allowing tables within tables. This applies to |Column|,
|MaskedColumn|, and |Quantity| columns, and includes possible structured
units. These structured data columns can be stored in ECSV, FITS, and HDF5
formats.

.. _whatsnew-fitters:

New model fitters have been added
=================================

New fitters have been added to :mod:`~astropy.modeling.fitting` based around the available
algorithms provided by `scipy.optimize.least_squares`, which is now the recommended
least-squares optimization algorithm from scipy. These new fitters are:

* :class:`~astropy.modeling.fitting.TRFLSQFitter`, which uses the Trust Region Reflective (TRF)
  algorithm.
* :class:`~astropy.modeling.fitting.LMLSQFitter`, which uses the Levenberg-Marquardt (LM) algorithm,
  via the `scipy.optimize.least_squares` function.
* :class:`~astropy.modeling.fitting.DogBoxLSQFitter`, which uses the dogleg algorithm.

.. _whatsnew-iers-handling:

Allow time conversions without predictive Earth rotation data (IERS-A)
======================================================================

Some time conversions like UTC -> UT1 require additional Earth rotation data for
full accuracy. These data are provided by the online IERS service as the IERS-A
tables and are downloaded as required. In some use cases this download is not
desired or possible. Examples include an application where full accuracy is not
required, running on a cluster node without internet access, or the rare
instances when the IERS server and mirror are not available. For these cases
there is a new config item `iers.conf.iers_degraded_accuracy
<astropy.utils.iers.Conf.iers_degraded_accuracy>` that specifies the behavior
when times are outside the range of available IERS data. The options are
``'error'`` (default to raise an :class:`~astropy.utils.iers.IERSRangeError`),
``'warn'`` (issue an class:`~astropy.utils.iers.IERSDegradedAccuracyWarning`) or
``'ignore'`` (ignore the warning).

In addition, the logic for auto-downloads was changed to guarantee that no matter
what happens with the IERS download operations, only warnings will be issued.
These warnings can be ignored if desired.

Full change log
===============

To see a detailed list of all changes in version v5.1, including changes in
API, please see the :ref:`changelog`.

Renamed/removed functionality
=============================
