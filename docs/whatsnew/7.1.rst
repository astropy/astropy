.. _whatsnew-7.1:

**************************
What's New in Astropy 7.1?
**************************

Overview
========

Astropy 7.1 is a major release that adds significant new functionality since
the 7.0 release.

In particular, this release includes:

* :ref:`whatsnew-7.1-table-spaces`
* :ref:`whatsnew-7.1-tdat-reader`
* :ref:`whatsnew-7.1-covariance`

In addition to these major changes, Astropy v7.1 includes a large number of
smaller improvements and bug fixes, which are described in the :ref:`changelog`.
By the numbers:

* X issues have been closed since v7.1
* X pull requests have been merged since v7.1
* X distinct people have contributed code

.. _whatsnew-7.1-table-spaces:

Trailing whitespace in ``Table`` string columns can now be stripped
===================================================================

Strings in FITS binary tables are sometimes padded with trailing whitespace.
It is now possible to remove those when reading a table with
``(Q)Table.read("filename.fits", strip_spaces=True)``. The default behavior is
not changed yet to preserve compatibility with codes that might rely on this,
it will change in the next major version (v8.0).

.. _whatsnew-7.1-tdat-reader:

Reading and writing TDAT files with ``astropy.io.ascii``
========================================================

The TDAT format, specified by https://heasarc.gsfc.nasa.gov/docs/software/dbdocs/tdat.html,
is now supported by the Unified File Read/Write Interface.

Note that this format is compatible with ``Table`` objects with integer, float,
and/or string data types, but not ``QTable`` objects or other data types.

.. _whatsnew-7.1-covariance:

Constructing, accessing, and storing covariance matrices for N-dimensional data
===============================================================================

We provide a new utility class that provides basic functionality for covariance
matrices associated `~astropy.nddata.NDData` objects via the new
`~astropy.nddata.Covariance` class.  See the full :ref:`nddata-covariance`
documentation.

.. _whatsnew-7.1-cosmology:

Cosmology
=========

The :mod:`astropy.cosmology.traits` module hosts various parts of cosmologies, such as the
:class:`~astropy.cosmology.traits.ScaleFactor` or
:class:`~astropy.cosmology.traits.TemperatureCMB`. These :term:`traits <trait type>` can be used to more
easily construct custom cosmologies by combining different components.

As a simple example, the :class:`~astropy.cosmology.traits.TemperatureCMB` trait
provides the ``Tcmb0`` property and
:meth:`~astropy.cosmology.traits.TemperatureCMB.Tcmb` method for computing the
cosmological CMB temperature at specified redshifts. By using this trait, you can add
temperature-related  functionality to your custom cosmology class without having to
implement it from scratch.

Here is an example of how to use the :class:`~astropy.cosmology.traits.ScaleFactor` and
:class:`~astropy.cosmology.traits.TemperatureCMB` traits in a custom cosmology class:

>>> import astropy.units as u
>>> from astropy.cosmology.traits import ScaleFactor, TemperatureCMB
>>> from astropy.cosmology import Cosmology
>>>
>>> class CustomCosmology(Cosmology, ScaleFactor, TemperatureCMB):
...     def __init__(self, H0, Om0, Ode0, Tcmb0=2.725):
...         self.H0 = H0
...         self.Om0 = Om0
...         self.Ode0 = Ode0
...         self.Tcmb0 = u.Quantity(Tcmb0, "K")
...         super().__init__()
...
...     is_flat = False
...     # Additional custom methods and properties can be added here

>>> cosmo = CustomCosmology(H0=70, Om0=0.3, Ode0=0.7)
>>> cosmo.scale_factor(0)
<Quantity 1.>
>>> cosmo.Tcmb(1)
<Quantity 5.45 K>

By combining different traits, you can create fully-featured cosmology classes with
minimal effort.


Full change log
===============

To see a detailed list of all changes in version v7.1, including changes in
API, please see the :ref:`changelog`.
