.. _whatsnew-7.0:

**************************
What's New in Astropy 7.0?
**************************

Overview
========

Astropy 7.0 is a major release that adds significant new functionality since
the 6.1 release.

In particular, this release includes:

* :ref:`whatsnew-7.0-table-masked-quantity`
* :ref:`whatsnew_7_0_quantity_to_string_formatter`
* :ref:`whatsnew_7_0_ecsv_meta_default_dict`
* :ref:`whatsnew_7_0_contributor_doc_improvement`
* :ref:`whatsnew_7_0_typing_stats`
* :ref:`whatsnew_7_0_unit_conversion_array_like`

In addition to these major changes, Astropy v7.0 includes a large number of
smaller improvements and bug fixes, which are described in the :ref:`changelog`.
By the numbers:

* X issues have been closed since v6.1
* X pull requests have been merged since v6.1
* X distinct people have contributed code

.. _whatsnew-7.0-table-masked-quantity:

Full ``MaskedQuantity`` Support in ``QTable``
=============================================

Masked quantities were already used in many table functions, like reading from
files, and are now fully supported throughout, i.e., ``MaskedQuantity`` are
now always used in ``QTable`` to represent masked quantities (or when the
``QTable`` is created with ``masked=True``). This removes the last vestiges of
a work-around where a normal ``Quantity`` was used with a stub of a mask, and
fixes functions like reading of table data from a list of dict that includes
quantities with missing entries, and aggregation of ``MaskedQuantity`` in
table groups.

.. _whatsnew_7_0_quantity_to_string_formatter:

``Quantity.to_string`` supports ``formatter`` for formatting
==============================================================

The :meth:`~astropy.units.Quantity.to_string` method now supports a ``formatter`` parameter.
This feature supports both Python's format specification mini-language via format strings and
custom formatting through callables. This enables users to have explicit and consistent control
over the numerical representation of quantities, accommodating a wide range of formatting needs.

Previously, the method primarily relied on the ``precision`` parameter for format control, which dictated
the number of significant digits and did not provide much freedom in the latex format.

Example:

.. code-block:: python

    >>> from astropy import units as u
    >>> q = u.Quantity(123.456, u.m)
    >>> custom_format = lambda x: f"\\approx {float(x):.1f}"
    >>> q.to_string(formatter=custom_format, format='latex')
    '$\\approx 123.5 \\; \\mathrm{m}$'
    >>> q.to_string(formatter='.3e', format='latex')
    '$1.235 \\times 10^{2} \\; \\mathrm{m}$'
    >>> q.to_string(precision=3, format='latex')
    '$123 \\; \\mathrm{m}$'

.. _whatsnew_7_0_ecsv_meta_default_dict:

Change default type for ``meta`` attribute to ``dict`` and update ECSV writer
=============================================================================

We have changed the default type for the ``meta`` attribute in ``Table`` and ``Column``
(and subclasses) from ``OrderedDict`` to ``dict``. Since Python 3.8 the ``dict`` class
is ordered by default, so there is no need to use ``OrderedDict``.

In addition, the ECSV table writer in :ref:`io-ascii` was updated to consistently
write the ``meta`` attribute as an ordered map using the  ``!!omap`` tag. This
convention conforms to the `ECSV specification
<https://github.com/astropy/astropy-APEs/blob/main/APE6.rst>`_ and is supported by
existing ECSV readers. Previously the ``meta`` attribute could be written as an ordinary
YAML map, which is not guaranteed to preserve the order of the keys.

.. _whatsnew_7_0_contributor_doc_improvement:

Improve the Contributor Documentation
=====================================

The `Contributor documentation <https://docs.astropy.org/en/latest/index_dev.html>`_ has
been significantly improved. It now includes a `Quickstart Guide
<https://docs.astropy.org/en/latest/development/quickstart.html>`_ with concise
instructions on setting up a development environment and making a pull request. In
addition, the developer documentation was reorganized and simplified where possible to
improve readability and accessibility. We welcome continued feedback on how to make
contributing to Astropy even easier and more enjoyable.

.. _whatsnew_7_0_typing_stats:

Typing in astropy.stats
=======================

The ``astropy.stats`` module is now fully typed. This is the first subpackage for
which this the case.

.. _whatsnew_7_0_unit_conversion_array_like:

Converting units on dask and other array-like objects
=====================================================

It is now possible to pass in array-like objects such as dask arrays as the
value in ``Unit.to`` and have those arrays not be converted to Numpy arrays::

.. doctest-requires:: dask

    >>> from dask import array as da
    >>> from astropy import units as u
    >>> arr = da.arange(10)
    >>> u.m.to(u.km, value=arr)
    dask.array<mul, shape=(10,), dtype=float64, chunksize=(10,), chunktype=numpy.ndarray>

Note that it is not yet possible to use ``Quantity`` with dask arrays directly.

.. _whatsnew_7_0_tdat_reader:

Reading and writing TDAT files with ``astropy.io.ascii``
=======================================

The TDAT format, specified by https://heasarc.gsfc.nasa.gov/docs/software/dbdocs/tdat.html,
is now supported by the Unified File Read/Write Interface. 

Note that this format is compatible with ``Table`` objects with integer, float,
and/or string data types, but not ``QTable`` objects or other data types.

Full change log
===============

To see a detailed list of all changes in version v7.0, including changes in
API, please see the :ref:`changelog`.
