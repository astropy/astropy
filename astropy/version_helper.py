#!/usr/bin/env python
from __future__ import division

"""
Utilities for generating the version string for AstroPy and the version.py
module, which contains version info for the package.

Within the generated astropy.version module, the `major`, `minor`, and `bugfix`
variables hold the respective parts of the version number (bugfix is '0' if
absent). The `release` variable is True if this is a release, and False if this
is a development version of astropy. For the actual version string, use::

    from astropy.version import version

or::

    from astropy import __version__

"""


def _version_split(version):
    """
    Split a version string into major, minor, and bugfix numbers (with bugfix
    optional, defaulting to 0).
    """

    if '-r' in version:
        version = version.split('-r', 1)[0]
    versplit = version.replace('dev', '').split('.')
    major = int(versplit[0])
    minor = int(versplit[1])
    bugfix = 0 if len(versplit) < 3 else int(versplit[2])
    return major, minor, bugfix


def _get_git_devstr(sha=False):
    """
    Determines the number of revisions in this repository.


    Parameters
    ----------
    sha : bool
        If True, the full SHA1 hash will be at the end of the devstr.
        Otherwise, the total count of commits in the repository will be
        used as a "revision number".

    Returns
    -------
    devstr : str
        A string that begins with 'dev' to be appended to the astropy version
        number string.

    """
    import os
    from subprocess import Popen, PIPE
    from warnings import warn


    currdir = os.path.abspath(os.path.split(__file__)[0])

    p = Popen(['git', 'rev-list', 'HEAD'], cwd=currdir,
              stdout=PIPE, stderr=PIPE, stdin=PIPE)
    stdout, stderr = p.communicate()

    if p.returncode == 128:
        warn('No git repository present! Using default dev version.')
        return ''
    elif p.returncode != 0:
        warn('Git failed while determining revision count: ' + stderr)
        return ''

    if sha:
        return '-git-' + stdout[:40]
    else:
        nrev = stdout.count('\n')
        return  '-r%i' % nrev


# This is used by setup.py to create a new version.py - see that file for
# details
_frozen_version_py_template = """
# Autogenerated by astropy's setup.py on {timestamp}

try:
    import pkg_resources
except ImportError:
    pkg_resources = None

version = '{verstr}'

major = {major}
minor = {minor}
bugfix = {bugfix}

release = {rel}


if pkg_resources:
    dist = pkg_resources.get_distribution('AstroPy')
    if dist.precedence == pkg_resources.DEVELOP_DIST:
        from astropy.version_helper import _get_git_devstr
        if '-r' in version:
            version_base = version.split('-r', 1)[0]
        try:
            version = version_base + _get_git_devstr()
        except OSError:
            pass
"""[1:]


def _get_version_py_str(version, release):

    import datetime

    timestamp = str(datetime.datetime.now())
    major, minor, bugfix = _version_split(version)
    return _frozen_version_py_template.format(timestamp=timestamp,
                                              verstr=version,
                                              major=major,
                                              minor=minor,
                                              bugfix=bugfix,
                                              rel=release)


def _generate_version_py(version, release):
    """Regenerate the version.py module if necessary."""

    import os

    try:
        from astropy.version import version as current_version
    except ImportError:
        current_version = None

    version_py = os.path.join('astropy', 'version.py')

    if current_version != version:
        print 'Freezing version number to', version_py

        with open(version_py, 'w') as f:  # This overwrites the actual version.py
            f.write(_get_version_py_str(version, release))

