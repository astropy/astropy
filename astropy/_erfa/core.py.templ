# Licensed under a 3-clause BSD style license - see LICENSE.rst

# "core.py" is auto-generated by erfa_generator.py from the template
# "core.py.templ". Do *not* edit "core.py" directly, instead edit
# "core.py.templ" and run erfa_generator.py from the source directory to
# update it.

"""
Python wrappers for the ufunc wrappers of the ERFA library.

..warning::
    This is currently *not* part of the public Astropy API, and may change in
    the future.

The key idea is that any function can be called with inputs that are arrays,
and the ufuncs will automatically vectorize and call the ERFA functions for
each item using broadcasting rules for numpy.  So the return values are always
numpy arrays of some sort.

For ERFA functions that take/return vectors or matrices, the vector/matrix
dimension(s) are always the *last* dimension(s).  For example, if you
want to give ten matrices (i.e., the ERFA input type is double[3][3]),
you would pass in a (10, 3, 3) numpy array.  If the output of the ERFA
function is scalar, you'll get back a length-10 1D array.
(Note that the ufuncs take this into account using structured dtypes.)

Note that the ufunc part of these functions are implemented in a separate
module (compiled as ``ufunc``), derived from the ``ufunc.c`` file.
"""

import warnings

from ..utils.exceptions import AstropyUserWarning

import numpy
from . import ufunc
from .ufunc import (dt_eraASTROM, dt_eraLDBODY, dt_pv,
                    dt_vector, dt_matrix, dt_sign, dt_type,
                    dt_ymdf, dt_hmsf, dt_dmsf)

__all__ = ['ErfaError', 'ErfaWarning',
           {{ funcs|map(attribute='pyname')|surround("'","'")|join(", ") }},
           {{ constants|map(attribute='name')|surround("'","'")|join(", ") }},
           # TODO: delete the functions below when they can get auto-generated
           'version', 'version_major', 'version_minor', 'version_micro', 'sofa_version',
           'dt_eraASTROM', 'dt_eraLDBODY']


# <---------------------------------Error-handling---------------------------->

class ErfaError(ValueError):
    """
    A class for errors triggered by ERFA functions (status codes < 0)
    """


class ErfaWarning(AstropyUserWarning):
    """
    A class for warnings triggered by ERFA functions (status codes > 0)
    """


STATUS_CODES = {}  # populated below before each function that returns an int

# This is a hard-coded list of status codes that need to be remapped,
# such as to turn errors into warnings.
STATUS_CODES_REMAP = {
    'cal2jd': {-3: 3}
}


def check_errwarn(statcodes, func_name):
    if not numpy.any(statcodes):
        return
    # Remap any errors into warnings in the STATUS_CODES_REMAP dict.
    if func_name in STATUS_CODES_REMAP:
        for before, after in STATUS_CODES_REMAP[func_name].items():
            statcodes[statcodes == before] = after
            STATUS_CODES[func_name][after] = STATUS_CODES[func_name][before]

    if numpy.any(statcodes<0):
        # errors present - only report the errors.
        if statcodes.shape:
            statcodes = statcodes[statcodes<0]

        errcodes = numpy.unique(statcodes)

        errcounts = dict([(e, numpy.sum(statcodes==e)) for e in errcodes])

        elsemsg = STATUS_CODES[func_name].get('else', None)
        if elsemsg is None:
            errmsgs = dict([(e, STATUS_CODES[func_name].get(e, 'Return code ' + str(e))) for e in errcodes])
        else:
            errmsgs = dict([(e, STATUS_CODES[func_name].get(e, elsemsg)) for e in errcodes])

        emsg = ', '.join(['{0} of "{1}"'.format(errcounts[e], errmsgs[e]) for e in errcodes])
        raise ErfaError('ERFA function "' + func_name + '" yielded ' + emsg)

    elif numpy.any(statcodes>0):
        #only warnings present
        if statcodes.shape:
            statcodes = statcodes[statcodes>0]

        warncodes = numpy.unique(statcodes)

        warncounts = dict([(w, numpy.sum(statcodes==w)) for w in warncodes])

        elsemsg = STATUS_CODES[func_name].get('else', None)
        if elsemsg is None:
            warnmsgs = dict([(w, STATUS_CODES[func_name].get(w, 'Return code ' + str(w))) for w in warncodes])
        else:
            warnmsgs = dict([(w, STATUS_CODES[func_name].get(w, elsemsg)) for w in warncodes])

        wmsg = ', '.join(['{0} of "{1}"'.format(warncounts[w], warnmsgs[w]) for w in warncodes])
        warnings.warn('ERFA function "' + func_name + '" yielded ' + wmsg, ErfaWarning)


# <------------------------structured dtype conversion------------------------>

def convert_to_dtype(arr, dtype, dtype_shape, dtype_ndim, name):
    arr = numpy.array(arr, copy=False, subok=True)
    if arr.shape[-dtype_ndim:] != dtype_shape:
        raise ValueError("{0} must be of trailing dimensions {1}"
                         .format(name, dtype_shape))
    return arr.ravel().view(dtype).reshape(arr.shape[:-dtype_ndim])


dt_int4 = numpy.dtype('4i4')
dt_double3 = numpy.dtype('3f8')
dt_double23 = numpy.dtype('(2,3)f8')
dt_double33 = numpy.dtype('(3,3)f8')
dt_bytes1 = numpy.dtype('S1')
dt_bytes12 = numpy.dtype('S12')

# <--------------------------Actual ERFA-wrapping code------------------------>

{% for constant in constants %}
{{ constant.name }} = {{ constant.value }}
"""{{ constant.doc|join(' ') }}"""
{%- endfor %}


{% for func in funcs -%}
def {{ func.pyname }}({{ func.args_by_inout('in|inout')|map(attribute='name')|join(', ') }}):
    """
    Wrapper for ERFA function ``{{ func.name }}``.

    Parameters
    ----------
    {%- for arg in func.args_by_inout('in|inout') %}
    {{ arg.name }} : {{ arg.ctype }} array
    {%- endfor %}

    Returns
    -------
    {%- for arg in func.args_by_inout('inout|out|ret') %}
    {{ arg.name }} : {{ arg.ctype }} array
    {%- endfor %}

    Notes
    -----
    The ERFA documentation is below.

{{ func.doc }}
    """

    {#-
     # Change dtype for all inputs that need it: those that have a
     # structured dtype, but not one of the era ones (for which
     # the inputs already should be in the right dtype).  For arguments
     # which are also used as output, we keep a link to the original for
     # possible later reshaping.
     #}
    {%- for arg in func.args_by_inout('in') -%}
    {%- if 'era' not in arg.ctype and arg.shape %}
    {{ arg.name }} = convert_to_dtype({{ arg.name }}, {{ arg.dtype }}, {{ arg.shape }}, {{ arg.ndim }}, '{{ arg.name }}')
    {%- endif %}
    {%- endfor %}
    {%- for arg in func.args_by_inout('inout') -%}
    {%- if 'era' not in arg.ctype and arg.shape %}
    {{ arg.name }}_orig = {{ arg.name }}
    {{ arg.name }} = convert_to_dtype({{ arg.name }}, {{ arg.dtype }}, {{ arg.shape }}, {{ arg.ndim }}, '{{ arg.name }}')
    {%- endif %}
    {%- endfor %}
    {#-
     # Call the ufunc. Note that we pass inout twice, once as input
     # and once as output, so that changes are done in-place
     #}
    {{ func.args_by_inout('inout|out|stat|ret')|map(attribute='name')|join(', ') }} = ufunc.{{ func.pyname }}({{ (func.args_by_inout('in|inout')|map(attribute='name')|list() + func.args_by_inout('inout')|map(attribute='name')|list())|join(', ') }})
    {#-
     # Check whether any warnings or errors occurred.
     #}
    {%- for arg in func.args_by_inout('stat') %}
    check_errwarn({{ arg.name }}, '{{ func.pyname }}')
    {%- endfor %}
    {#-
     # For in-place arguments, check whether our cast was just a view;
     # if so, all is fine. But if not, we need to copy back.
     #}
    {%- for arg in func.args_by_inout('inout') -%}
    {%- if 'era' not in arg.ctype and arg.shape %}
    if not numpy.may_share_memory({{ arg.name }}, {{ arg.name }}_orig):
        {{ arg.name }}_orig[...] = {{ arg.name }}.view({{ arg.view_dtype }})
    {{ arg.name }} = {{ arg.name }}_orig
    {%- endif %}
    {%- endfor %}
    {#-
     # View any structured output arguments as their based type.
     #}
    {%- for arg in func.args_by_inout('out') -%}
    {%- if 'era' not in arg.ctype and (arg.shape or 'char' in arg.ctype) %}
    {{ arg.name }} = {{ arg.name }}.view({{ arg.view_dtype }})
    {%- endif %}
    {%- endfor %}
    {#-
     # Return the output arguments (including the inplace ones)
     #}
    return {{ func.args_by_inout('inout|out|ret')|map(attribute='name')|join(', ') }}


{#
 # Define the status codes that this function returns.
 #}
{%- if func.args_by_inout('stat') -%}
{%- for stat in func.args_by_inout('stat') -%}
{%- if stat.doc_info.statuscodes -%}
STATUS_CODES['{{ func.pyname }}'] = {{ stat.doc_info.statuscodes|string }}
{% endif %}
{% endfor %}
{% endif -%}
{% endfor -%}


# TODO: delete the functions below when they can get auto-generated
# (current machinery doesn't support returning strings or non-status-codes)
def version():
    """
    Returns the package version
    as defined in configure.ac
    in string format
    """
    return "1.4.0"

def version_major():
    """
    Returns the package major version
    as defined in configure.ac
    as integer
    """
    return 1

def version_minor():
    """
    Returns the package minor version
    as defined in configure.ac
    as integer
    """
    return 4

def version_micro():
    """
    Returns the package micro version
    as defined in configure.ac
    as integer
    """
    return 0

def sofa_version():
    """
    Returns the corresponding SOFA version
    as defined in configure.ac
    in string format
    """
    return "20170420"
