# Licensed under a 3-clause BSD style license - see LICENSE.rst

# "core.py" is auto-generated by erfa_generator.py from the template
# "core.py.templ". Do *not* edit "core.py" directly, instead edit
# "core.py.templ" and run erfa_generator.py from the source directory to
# update it.

"""
Python wrappers for the ufunc wrappers of the ERFA library.

..warning::
    This is currently *not* part of the public Astropy API, and may change in
    the future.

The key idea is that any function can be called with inputs that are arrays,
and the ufuncs will automatically vectorize and call the ERFA functions for
each item using broadcasting rules for numpy.  So the return values are always
numpy arrays of some sort.

For ERFA functions that take/return vectors or matrices, the vector/matrix
dimension(s) are always the *last* dimension(s).  For example, if you
want to give ten matrices (i.e., the ERFA input type is double[3][3]),
you would pass in a (10, 3, 3) numpy array.  If the output of the ERFA
function is scalar, you'll get back a length-10 1D array.
(Note that the ufuncs take this into account using structured dtypes.)

Note that the ufunc part of these functions are implemented in a separate
module (compiled as ``ufunc``), derived from the ``ufunc.c`` file.
"""

import warnings

from ..utils.exceptions import AstropyUserWarning
from ..utils.misc import check_broadcast

import numpy
from . import ufunc
from .ufunc import (dt_eraASTROM, dt_eraLDBODY, dt_pv,
                    dt_sign, dt_type, dt_ymdf, dt_hmsf, dt_dmsf)

__all__ = ['ErfaError', 'ErfaWarning',
           {{ funcs|map(attribute='pyname')|surround("'","'")|join(", ") }},
           {{ constants|map(attribute='name')|surround("'","'")|join(", ") }},
           # TODO: delete the functions below when they can get auto-generated
           'version', 'version_major', 'version_minor', 'version_micro', 'sofa_version',
           'dt_eraASTROM', 'dt_eraLDBODY', 'dt_pv', 'dt_ymdf', 'dt_hmsf', 'dt_dmsf']


# <---------------------------------Error-handling---------------------------->

class ErfaError(ValueError):
    """
    A class for errors triggered by ERFA functions (status codes < 0)
    """


class ErfaWarning(AstropyUserWarning):
    """
    A class for warnings triggered by ERFA functions (status codes > 0)
    """


STATUS_CODES = {}  # populated below before each function that returns an int

# This is a hard-coded list of status codes that need to be remapped,
# such as to turn errors into warnings.
STATUS_CODES_REMAP = {
    'cal2jd': {-3: 3}
}


def check_errwarn(statcodes, func_name):
    if not numpy.any(statcodes):
        return
    # Remap any errors into warnings in the STATUS_CODES_REMAP dict.
    if func_name in STATUS_CODES_REMAP:
        for before, after in STATUS_CODES_REMAP[func_name].items():
            statcodes[statcodes == before] = after
            STATUS_CODES[func_name][after] = STATUS_CODES[func_name][before]

    if numpy.any(statcodes<0):
        # errors present - only report the errors.
        if statcodes.shape:
            statcodes = statcodes[statcodes<0]

        errcodes = numpy.unique(statcodes)

        errcounts = dict([(e, numpy.sum(statcodes==e)) for e in errcodes])

        elsemsg = STATUS_CODES[func_name].get('else', None)
        if elsemsg is None:
            errmsgs = dict([(e, STATUS_CODES[func_name].get(e, 'Return code ' + str(e))) for e in errcodes])
        else:
            errmsgs = dict([(e, STATUS_CODES[func_name].get(e, elsemsg)) for e in errcodes])

        emsg = ', '.join(['{0} of "{1}"'.format(errcounts[e], errmsgs[e]) for e in errcodes])
        raise ErfaError('ERFA function "' + func_name + '" yielded ' + emsg)

    elif numpy.any(statcodes>0):
        #only warnings present
        if statcodes.shape:
            statcodes = statcodes[statcodes>0]

        warncodes = numpy.unique(statcodes)

        warncounts = dict([(w, numpy.sum(statcodes==w)) for w in warncodes])

        elsemsg = STATUS_CODES[func_name].get('else', None)
        if elsemsg is None:
            warnmsgs = dict([(w, STATUS_CODES[func_name].get(w, 'Return code ' + str(w))) for w in warncodes])
        else:
            warnmsgs = dict([(w, STATUS_CODES[func_name].get(w, elsemsg)) for w in warncodes])

        wmsg = ', '.join(['{0} of "{1}"'.format(warncounts[w], warnmsgs[w]) for w in warncodes])
        warnings.warn('ERFA function "' + func_name + '" yielded ' + wmsg, ErfaWarning)


# <------------------------structured dtype conversion------------------------>

class D3Fix(numpy.ndarray):
    """NDarray subclass that can transfer itself into a Quantity.

    For the rationale for this, see arrayify_inputs_and_create_d3_fix.
    """
    def __quantity_subclass__(self, unit):
        return type(self), True

    def __array_wrap__(self, obj, context):
        return obj.view(numpy.ndarray)


def arrayify_inputs_and_create_d3_fix(inputs, core_dims, out_core_shape, out_dtype):
    """Create an empty array of the right trailing shape.

    Gufuncs currently do not allow one to pass in fixed dimensions, which
    means that for functions with signatures like `()->(n)`, one has to pass in
    an output argument for the gufunc to determine `n` (to be 3 for instance).

    For those gufuncs, this functions creates the output array upfront,
    with properly broadcast dimensions.

    A problem that arises, though, is that if anything overrides the function
    using ``__array_ufunc__``, it will fail because the output is of the wrong
    class.  To work around this for `~astropy.units.Quantity` at least, we
    create the output with a special class (``D3Fix``), which has an
    ``__array_wrap__`` that will turn it into a regular ndarray for normal
    usage, and a ``__quantity_subclass__`` that allows it to be replaced by a
    `~astropy.units.Quantity`.

    Obviously, this is a hack, and only works easily for Quantity (which,
    however, is the only class likely to use this private implementation).  As
    an alternative, one could create a regular empty ndarray and then remove
    it in the C type resolver, so that a new one with the proper class is
    created by the iterator.  But that seemed even more fragile.

    Parameters
    ----------
    inputs : array-like
        Input arguments, used to determine the required broadcast shape.
    core_dims: list of int
        Number of core dimensions for the inputs; these are removed for
        calculating the broadcast shape.
    out_core_shape : tuple
        Output core shape; the full shape will be the broadcast shape
        determined from the inputs plus this core shape.
    out_dtype : `~numpy.dtype`
        Data type of the array.

    Notes
    -----
    Once https://github.com/numpy/numpy/pull/11175 is in, this will no
    longer be necessary for all but NUMPY_LT_1_16, since we'll be able to just
    define the signature with explicit numerical dimensions.
    """
    shapes = []
    arrays = []
    for input, core_dim in zip(inputs, core_dims):
        try:
            shape = input.shape
        except AttributeError:
            input = numpy.asanyarray(input)
            shape = input.shape
        shapes.append(shape[:-core_dim] if core_dim else shape)
        arrays.append(input)

    broadcast_shape = check_broadcast(*shapes)
    d3_fix = numpy.empty(broadcast_shape + out_core_shape, out_dtype).view(D3Fix)
    return arrays, d3_fix


dt_bytes1 = numpy.dtype('S1')
dt_bytes12 = numpy.dtype('S12')

# <--------------------------Actual ERFA-wrapping code------------------------>

{% for constant in constants %}
{{ constant.name }} = {{ constant.value }}
"""{{ constant.doc|join(' ') }}"""
{%- endfor %}


{% for func in funcs -%}
def {{ func.pyname }}({{ func.args_by_inout('in|inout')|map(attribute='name')|join(', ') }}):
    """
    Wrapper for ERFA function ``{{ func.name }}``.

    Parameters
    ----------
    {%- for arg in func.args_by_inout('in|inout') %}
    {{ arg.name }} : {{ arg.ctype }} array
    {%- endfor %}

    Returns
    -------
    {%- for arg in func.args_by_inout('inout|out|ret') %}
    {{ arg.name }} : {{ arg.ctype }} array
    {%- endfor %}

    Notes
    -----
    The ERFA documentation is below.

{{ func.doc }}
    """

    {#-
     # Call the ufunc. Note that we pass inout twice, once as input
     # and once as output, so that changes are done in-place
     #}
    {%- if func.d3_fix_arg %}
    {% if func.args_by_inout('in|inout') -%}
    ({{ func.args_by_inout('in|inout')|map(attribute='name')|join(', ') }},)
    {%- else -%}_{%- endif -%}, {{ func.d3_fix_arg.name
        }} = arrayify_inputs_and_create_d3_fix(
        [{{ func.args_by_inout('in|inout')|map(attribute='name')|list()|join(', ')
        }}], core_dims=[{{
        func.args_by_inout('in|inout')|map(attribute='ndim')|list()|join(', ')
        }}], out_core_shape={{ func.d3_fix_arg.shape
        }}, out_dtype=numpy.{{ func.d3_fix_arg.ctype }})
    {%- endif %}
    {{ func.python_call }}
    {#-
     # Check whether any warnings or errors occurred.
     #}
    {%- for arg in func.args_by_inout('stat') %}
    check_errwarn({{ arg.name }}, '{{ func.pyname }}')
    {%- endfor %}
    {#-
     # Any string outputs will be in structs; view them as their base type.
     #}
    {%- for arg in func.args_by_inout('out') -%}
    {%- if 'char' in arg.ctype %}
    {{ arg.name }} = {{ arg.name }}.view({{ arg.view_dtype }})
    {%- endif %}
    {%- endfor %}
    {#-
     # Return the output arguments (including the inplace ones)
     #}
    return {{ func.args_by_inout('inout|out|ret')|map(attribute='name')|join(', ') }}


{#
 # Define the status codes that this function returns.
 #}
{%- if func.args_by_inout('stat') -%}
{%- for stat in func.args_by_inout('stat') -%}
{%- if stat.doc_info.statuscodes -%}
STATUS_CODES['{{ func.pyname }}'] = {{ stat.doc_info.statuscodes|string }}
{% endif %}
{% endfor %}
{% endif -%}
{% endfor -%}


# TODO: delete the functions below when they can get auto-generated
# (current machinery doesn't support returning strings or non-status-codes)
def version():
    """
    Returns the package version
    as defined in configure.ac
    in string format
    """
    return "1.4.0"

def version_major():
    """
    Returns the package major version
    as defined in configure.ac
    as integer
    """
    return 1

def version_minor():
    """
    Returns the package minor version
    as defined in configure.ac
    as integer
    """
    return 4

def version_micro():
    """
    Returns the package micro version
    as defined in configure.ac
    as integer
    """
    return 0

def sofa_version():
    """
    Returns the corresponding SOFA version
    as defined in configure.ac
    in string format
    """
    return "20170420"
