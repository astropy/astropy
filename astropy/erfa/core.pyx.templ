# Licensed under a 3-clause BSD style license - see LICENSE.rst

# "core.pyx" is auto-generated by erfa_generator.py from the template
# "core.pyx.templ". Do *not* edit "core.pyx" directly, instead edit
# "core.pyx.templ" and run erfa_generator.py from the source directory to
# update it.

"""
This module contains the Cython parts of the ERFA python warppers.  
This is separated from the python code in ``core.py`` because putting it all in
Cython results in very long compile times.  By having only the vectorized core
in Cython, the compilation time is kept short without sacrificing much (if any)
performance.

For more about the module and how to use it, see the ``core.py`` docstrings.
"""
from __future__ import absolute_import, division, print_function

import warnings
from distutils.version import LooseVersion

from ..utils.exceptions import AstropyUserWarning

import numpy
cimport numpy
from cpython.ref cimport PyObject

numpy.import_array()

__all__ = [{{ funcs|map(attribute='pyname')|surround("'_","'")|join(", ") }}]

#<-----------------------------NpyIter handling------------------------------->

ctypedef void NpyIter
ctypedef int (*IterNextFunc)(NpyIter * iter) nogil

cdef extern from "numpy/arrayobject.h":
    IterNextFunc GetIterNext "NpyIter_GetIterNext" (NpyIter *iter, char **)
    char** GetDataPtrArray "NpyIter_GetDataPtrArray" (NpyIter* iter)

ctypedef struct NewNpyArrayIterObject:
    PyObject base
    NpyIter *iter

cdef inline NpyIter* GetNpyIter(object iter):
    return (<NewNpyArrayIterObject*>iter).iter


#<--------------------------Actual ERFA-wrapping code------------------------->

cdef extern from "erfam.h":
    struct eraASTROM:
        pass
    struct eraLDBODY:
        pass

cdef extern from "erfa.h":
{%- for func in funcs %}
    {{ func.ret }} {{ func.name }}({{ func.args_by_inout('in|inout|out')|map(attribute='ctype_ptr')|join(', ') }})
{%- endfor %}

{% for func in funcs %}
def _{{ func.pyname }}(it):
    #Iterate
    {%- for arg in func.args_by_inout('in|inout|out|ret|stat') %}
    cdef {{ arg.ctype_ptr }} _{{ arg.name }}
    {%- endfor %}
    cdef bint stat_ok = True
    cdef char** dataptrarray = GetDataPtrArray(GetNpyIter(it))
    cdef IterNextFunc iternext = GetIterNext(GetNpyIter(it), NULL)
    cdef int status = 1
    while status:
        {%- for arg in func.args_by_inout('in|inout|out') %}
        _{{ arg.name }} = (<{{ arg.ctype }} *>(dataptrarray[{{ func.args.index(arg) }}])){%- if arg.ctype_ptr[-1] != '*' %}[0]{% endif %}
        {%- endfor %}
        {{ func.args_by_inout('ret|stat')|map(attribute='name')|surround('_',' = ')|join }}{{ func.name }}({{ func.args_by_inout('in|inout|out')|map(attribute='name')|prefix('_')|join(', ') }})
        {%- for arg in func.args_by_inout('ret|stat') %}
        (<{{ arg.ctype }} *>(dataptrarray[{{ func.args.index(arg) }}]))[0] = _{{ arg.name }}
        {%- endfor %}
        {%- for arg in func.args_by_inout('stat') %}
        if _{{ arg.name }} != 0:
            stat_ok = False
        {%- endfor %}
        status = iternext(GetNpyIter(it))
    return stat_ok

{% endfor %}
