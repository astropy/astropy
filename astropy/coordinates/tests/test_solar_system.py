from __future__ import (absolute_import, division, print_function,
                        unicode_literals)

import numpy as np

from ...time import Time
from ... import units as u
from ...constants import c
from ..builtin_frames import GCRS
from ..earth import EarthLocation
from ..sky_coordinate import SkyCoord
from ..solar_system import get_planet, get_moon
from ...tests.helper import pytest, assert_quantity_allclose, remote_data

try:
    import jplephem  # pylint: disable=W0611
except ImportError:
    HAS_JPLEPHEM = False
else:
    HAS_JPLEPHEM = True

separation_tolerance_planets = 1*u.arcmin
separation_tolerance_moon = 1*u.degree
distance_tolerance = 0.02


@remote_data
@pytest.mark.skipif(str('not HAS_JPLEPHEM'))
def test_positions_distances_kpno_1980():
    """
    Test positions against those generated by JPL Horizons accessed on
    2016-03-28, with refraction turned on.
    """
    t = Time('1980-03-25 00:00')
    kitt_peak = EarthLocation.from_geodetic(lon=-111.6*u.deg,
                                            lat=31.963333333333342*u.deg,
                                            height=2120*u.m)
    frame = GCRS(obstime=t, obsgeoloc=u.Quantity(kitt_peak.geocentric,
                                                 copy=False))

    moon_astropy_1980 = get_moon(t, kitt_peak)
    mercury_astropy_1980 = get_planet(t, 1, kitt_peak)
    jupiter_astropy_1980 = get_planet(t, 5, kitt_peak)

    # Results returned by JPL Horizons web interface
    mercury_horizons_1980 = SkyCoord(ra='22h42m51.03s', dec='-08d23m16.3s',
                                     frame=frame)
    moon_horizons_1980 = SkyCoord(ra='07h35m26.49s', dec='+18d14m43.2s',
                                  frame=frame)
    jupiter_horizons_1980 = SkyCoord(ra='10h18m15.71s', dec='+11d57m04.4s',
                                     frame=frame)
    d_mercury_1980 = c*(6.323068*u.min)
    d_moon_1980 = c*(0.021651*u.min)
    d_jupiter_1980 = c*(37.694477*u.min)

    # Assert sky coordinates are close
    assert (mercury_astropy_1980.separation(mercury_horizons_1980) <
            separation_tolerance_planets)
    assert (jupiter_astropy_1980.separation(jupiter_horizons_1980) <
            separation_tolerance_planets)
    assert (moon_astropy_1980.separation(moon_horizons_1980) <
            separation_tolerance_moon)

    # Assert distances are close
    distances_astropy = [mercury_astropy_1980.distance,
                         moon_astropy_1980.distance,
                         jupiter_astropy_1980.distance]
    distances_horizons = [d_mercury_1980, d_moon_1980, d_jupiter_1980]

    assert_quantity_allclose(distances_astropy, distances_horizons,
                             rtol=distance_tolerance)


@remote_data
@pytest.mark.skipif(str('not HAS_JPLEPHEM'))
def test_positions_distances_ctio_2016():
    """
    Test positions against those generated by JPL Horizons accessed on
    2016-03-28, with refraction turned on.
    """
    t = Time('2016-09-25 00:00')
    ctio = EarthLocation.from_geodetic(lon=-70.815*u.deg,
                                       lat=-30.165277777777778*u.deg,
                                       height=2215*u.m)

    frame = GCRS(obstime=t, obsgeoloc=u.Quantity(ctio.geocentric,
                                                 copy=False))

    moon_astropy_2016 = get_moon(t, ctio)
    mercury_astropy_2016 = get_planet(t, 1, ctio)
    jupiter_astropy_2016 = get_planet(t, 5, ctio)

    # Results returned by JPL Horizons web interface
    mercury_horizons_2016 = SkyCoord(ra='11h06m01.23s', dec='+06d04m49.4s',
                                     frame=frame)
    moon_horizons_2016 = SkyCoord(ra='07h32m55.22s', dec='+17d49m10.7s',
                                  frame=frame)
    jupiter_horizons_2016 = SkyCoord(ra='12h13m09.58s', dec='-00d14m05.3s',
                                     frame=frame)
    d_mercury_1980 = c*(7.063664*u.min)
    d_moon_1980 = c*(0.021536*u.min)
    d_jupiter_1980 = c*(53.675250*u.min)

    # Assert sky coordinates are close
    assert (mercury_astropy_2016.separation(mercury_horizons_2016) <
            separation_tolerance_planets)
    assert (jupiter_astropy_2016.separation(jupiter_horizons_2016) <
            separation_tolerance_planets)
    assert (moon_astropy_2016.separation(moon_horizons_2016) <
            separation_tolerance_moon)

    # Assert distances are close
    distances_astropy = [mercury_astropy_2016.distance,
                         moon_astropy_2016.distance,
                         jupiter_astropy_2016.distance]
    distances_horizons = [d_mercury_1980, d_moon_1980, d_jupiter_1980]

    assert_quantity_allclose(distances_astropy, distances_horizons,
                             rtol=distance_tolerance)
