# We set the language to c because python isn't supported on the MacOS X nodes
# on Travis. However, the language ends up being irrelevant anyway, since we
# install Python ourselves using conda.
language: c

compiler: gcc

# Cache can be cleared from the travis settings menu, see docs currently at
# https://docs.travis-ci.com/user/caching#Clearing-Caches
cache:
  - ccache
  - pip

os:
    - linux

stage: Comprehensive tests

# Setting sudo to false opts in to Travis-CI container-based builds.
sudo: false

# The apt packages below are needed for sphinx builds, which can no longer
# be installed with sudo apt-get.
addons:
    apt:
        packages:
            - language-pack-de

env:
    global:
        # Set defaults to avoid repeating in most cases
        - SETUP_XVFB=True
        - EVENT_TYPE='push pull_request'

stages:
   # Do the style check and a single test job, don't proceed if it fails
   - name: Initial tests
   # Do the rest of the tests
   - name: Comprehensive tests
   - name: Cron tests
     if: type = cron

matrix:

    # Don't wait for allowed failures
    fast_finish: true

    include:
        # Try MacOS X. Use a slightly old numpy version to help test against
        # all supported numpy versions.
        - os: osx
          stage: Cron tests
          env: PYTHON_VERSION=3.6
               TOXENV=py36-setup-all
               TOXARGS='--remote-data=astropy'
               # EVENT_TYPE='cron'
               # CONDA_DEPENDENCIES="$CONDA_ALL_DEPENDENCIES clang"
               # CCOMPILER=clang

        # Try all python versions and Numpy versions. Since we can assume that
        # the Numpy developers have taken care of testing Numpy with different
        # versions of Python, we can vary Python and Numpy versions at the same
        # time.
        # Run this test using native pytest
        - os: linux
          env: PYTHON_VERSION=3.5
               PYTEST_VERSION='==3.6'
               NUMPY_VERSION='==1.13.3'
               TOXENV=py35-pytest
               TOXOPTS='--develop'
               TOXARGS='--open-files --doctest-rst'

        # Now try with all optional dependencies. We also include the --readonly
        # flag to make sure no files are being written to the temporary install
        # location during testing. We also use this build to make sure that the
        # dependencies get correctly installed with pip.
        - os: linux
          env: PYTHON_VERSION=3.6
               TOXENV=py36-setup-all
               PYTEST_VERSION='==3.6'
               TOXARGS='--remote-data=astropy --readonly'
               LC_CTYPE=C.ascii LC_ALL=C

        - os: linux
          stage: Initial tests
          # language: python
          # python: 3.7
          # dist: xenial
          # sudo: true
          env: PYTHON_VERSION=3.7
               TOXENV=py37-pytest-all
               TOXARGS='--durations=50'
          compiler: clang

        # Full tests with coverage checks.
        - os: linux
          env: PYTHON_VERSION=3.6
               TOXENV=py36-setup-all
               TOXARGS='--coverage --remote-data=astropy --readonly'
               LC_CTYPE=C.ascii LC_ALL=C
               CFLAGS='--coverage -fno-inline-functions -O0'
               EVENT_TYPE='push pull_request cron'

        # Try pre-release version of Numpy without optional dependencies
        - os: linux
          env: PYTHON_VERSION=3.6
               TOXENV=py36-pytest
               TOXOPTS='--pre'
               EVENT_TYPE='push pull_request cron'

        # Do a PEP8/pyflakes test with flake8
        - os: linux
          stage: Initial tests
          # language: python
          # python: 3.6
          env: TOXENV=flake8

        # Try developer version of Numpy with optional dependencies and also
        # run all remote tests. Since both cases will be potentially
        # unstable, we combine them into a single unstable build that we can
        # mark as an allowed failure below.
        - os: linux
          env: PYTHON_VERSION=3.7
               TOXENV=dev
               TOXARGS='--remote-data=astropy'

        # We check numpy-dev also in a job that only runs from cron, so that
        # we can spot issues sooner. We do not use remote data here, since
        # that gives too many false positives due to URL timeouts.
        # We also install all dependencies via pip here so we pick up the latest
        # releases.
        - os: linux
          stage: Cron tests
          env: PYTHON_VERSION=3.6
               TOXENV=dev
               EVENT_TYPE='cron'

    allow_failures:
      - os: linux
        env: PYTHON_VERSION=3.7
             TOXENV=dev
             TOXARGS='--remote-data=astropy'

before_install:

    # We need to use CCOMPILER otherwise Travis overwrites CC if we define it
    # in env: above.
    - if [ ! -z $CCOMPILER ]; then
        export CC=$CCOMPILER;
      fi

     # Check CC variable
    - echo $CC

install:
    - git clone git://github.com/astropy/ci-helpers.git
    - source ci-helpers/travis/setup_conda.sh
    - pip install tox tox-venv tox-conda

script:
    - tox -vv $TOXOPTS -- $TOXARGS

after_success:
    - if [[ $TOXARGS == *--coverage* ]]; then
        pip install codecov;
        codecov --gcov-glob "*cextern*";
      fi
