# We set the language to c because python isn't supported on the MacOS X nodes
# on Travis. However, the language ends up being irrelevant anyway, since we
# install Python ourselves using conda.
language: c

compiler: gcc

# Cache can be cleared from the travis settings menu, see docs currently at
# https://docs.travis-ci.com/user/caching#Clearing-Caches
cache:
  - ccache
  - .hypothesis

notifications:
  slack:
    on_success: never
    on_failure: always
    secure: gLrQgrHNqHs0lOPsfvjlh0v8k56mJifPNpht0BX55YV0n1u5alKCrKOVcKTFNFY0gOldhwFNFq4oy3o5EaZkDx+CO71qiwwJr7ex7zT70EjHzWxEG8l2Bww9J3xVzhGgQw6tMq57HHiuOoJ07TJPvVxL+E/WZmkxRAdlzUhcab4=
    if: type = cron

os:
    - linux


# The apt packages below are needed for sphinx builds, which can no longer
# be installed with sudo apt-get.
# tzdata is included to ensure system leap seconds are up to date.
addons:
    apt:
        packages:
            - graphviz
            - language-pack-de
            - tzdata

env:
    global:
        # Set defaults to avoid repeating in most cases
        - PYTHON_VERSION=3.6
        - NUMPY_VERSION=stable
        - MAIN_CMD='python setup.py'
        - CONDA_DEPENDENCIES='Cython jinja2'
        - CONDA_ALL_DEPENDENCIES='Cython jinja2 scipy h5py matplotlib pyyaml pandas pytz html5lib beautifulsoup4 ipython mpmath bleach bottleneck'
        - ASDF_PIP_DEP='asdf>=2.5'
        - ASDF_DEV='git+https://github.com/spacetelescope/asdf.git#egg=asdf'
        - DEV_PIP_DEP='Cython jinja2 scipy h5py matplotlib pyyaml scikit-image pandas pytz html5lib beautifulsoup4 ipython mpmath bleach bottleneck'
        - SETUP_XVFB=True
        - EVENT_TYPE='push pull_request'
        - SETUP_CMD='test'
        - INSTALL_WITH_PIP=False
        - PIP_FLAGS=""
        - EXTRAS_INSTALL=""
        - USE_CI_HELPERS=True
        # Use this for the dependencies when not using ci-helpers
        - OTHER_DEPENDENCY_PREFERENCES=''

        # PEP8 errors/warnings:
        # E101 - mix of tabs and spaces
        # W191 - use of tabs
        # W291 - trailing whitespace
        # W292 - no newline at end of file
        # W293 - trailing whitespace
        # W391 - blank line at end of file
        # E111 - 4 spaces per indentation level
        # E112 - 4 spaces per indentation level
        # E113 - 4 spaces per indentation level
        # E301 - expected 1 blank line, found 0
        # E302 - expected 2 blank lines, found 0
        # E303 - too many blank lines (3)
        # E304 - blank lines found after function decorator
        # E305 - expected 2 blank lines after class or function definition
        # E306 - expected 1 blank line before a nested definition
        # E502 - the backslash is redundant between brackets
        # E722 - do not use bare except
        # E901 - SyntaxError or IndentationError
        # E902 - IOError
        # E999: SyntaxError -- failed to compile a file into an Abstract Syntax Tree
        # # F821: undefined name  # Note: Removed for now because of heavy use of units.si
        #Â F822: undefined name in __all__
        # F823: local variable name referenced before assignment
        - FLAKE8_OPT="--select=E101,W191,W291,W292,W293,W391,E111,E112,E113,E30,E502,E722,E901,E902,E999,F822,F823"

stages:
   # Do the style check and a single test job, don't proceed if it fails
   - name: Initial tests
   # Do the rest of the tests
   - name: Comprehensive tests
   - name: Final tests
   - name: Cron tests
     if: type = cron

jobs:

    # Don't wait for allowed failures
    fast_finish: true

    include:
        - name: Python 3.7 with all optional dependencies for OSX
          os: osx
          stage: Cron tests
          env: SETUP_CMD='test --remote-data=astropy'
               CONDA_DEPENDENCIES="$CONDA_ALL_DEPENDENCIES clang"
               PIP_DEPENDENCIES="scikit-image jplephem $ASDF_PIP_DEP"
               CCOMPILER=clang
               EVENT_TYPE='cron'

        # Try all python versions and Numpy versions. Since we can assume that
        # the Numpy developers have taken care of testing Numpy with different
        # versions of Python, we can vary Python and Numpy versions at the same
        # time.
        - name: Python 3.6 with oldest supported version of all dependencies
          os: linux
          stage: Comprehensive tests
          env: PYTHON_VERSION=3.6 NUMPY_VERSION=1.16
               CONDA_DEPENDENCIES=$CONDA_ALL_DEPENDENCIES
               SCIPY_VERSION=0.18 MATPLOTLIB_VERSION=2.1
               PYTEST_VERSION=4
               INSTALL_CMD='python setup.py build_ext --inplace'
               PIP_DEPENDENCIES='pytest-astropy pytest-openfiles==0.4.0'
               TEST_CMD='pytest --open-files --doctest-rst'
          script:
            - $INSTALL_CMD
            - $TEST_CMD

        # Now try with all optional dependencies. We also include the --readonly
        # flag to make sure no files are being written to the temporary install
        # location during testing. We also use this build to make sure that the
        # dependencies get correctly installed with pip.
        - name: Python 3.8 with required dependencies
          os: linux
          stage: Comprehensive tests
          env: SETUP_CMD='test --remote-data=astropy --readonly'
               LC_CTYPE=C.ascii LC_ALL=C
               PIP_DEPENDENCIES="" CONDA_DEPENDENCIES=""
               INSTALL_WITH_PIP=True
               EXTRAS_INSTALL="test,all"
               PYTHON_VERSION=3.8

        - name: Python 3.7 with dependencies
          os: linux
          stage: Initial tests
          env: PYTHON_VERSION=3.7 CONDA_DEPENDENCIES=$CONDA_ALL_DEPENDENCIES
               PIP_DEPENDENCIES="scikit-image $ASDF_PIP_DEP"
               SETUP_CMD='test -a "--durations=50"'
          compiler: clang

        # Full tests with coverage checks.
        - name: Python 3.6 with all optional dependencies as coverage
          os: linux
          stage: Comprehensive tests
          env: SETUP_CMD='test --coverage --remote-data=astropy --readonly'
               CONDA_DEPENDENCIES=$CONDA_ALL_DEPENDENCIES
               PIP_DEPENDENCIES="scikit-image codecov objgraph jplephem bintrees sortedcontainers $ASDF_PIP_DEP"
               LC_CTYPE=C.ascii LC_ALL=C
               CFLAGS='--coverage -fno-inline-functions -O0'
               MATPLOTLIB_VERSION=2.1
               EVENT_TYPE='push pull_request cron'

        # Try on Windows
        - name: Python 3.7 with all optional dependencies on Windows
          os: windows
          stage: Final tests
          env: PYTHON_VERSION=3.7 SETUP_CMD='test --readonly'
               CONDA_DEPENDENCIES=""
               PIP_DEPENDENCIES="wheel Cython scipy h5py beautifulsoup4 html5lib jinja2 pyyaml matplotlib scikit-image pytz pandas objgraph asdf"

        # Do a PEP8/pyflakes test with flake8
        - name: Code style checks
          os: linux
          stage: Initial tests
          env: MAIN_CMD="flake8 astropy --count $FLAKE8_OPT" SETUP_CMD=''

        # Try developer version of Numpy with optional dependencies and also
        # run all remote tests. Since both cases will be potentially
        # unstable, we combine them into a single unstable build that we can
        # mark as an allowed failure below.
        - name: Python 3.7 with remote data and dev version of key dependencies
          os: linux
          stage: Final tests
          env: PYTHON_VERSION=3.7 NUMPY_VERSION=dev SETUP_CMD='test --remote-data'
               CONDA_DEPENDENCIES=''
               PIP_DEPENDENCIES="$DEV_PIP_DEP $ASDF_DEV"
               MATPLOTLIB_VERSION=dev

        # Run documentation link check (this is cron only on master).
        # NOTE: matplotlib pinning should be consistent with CircleCI HTML job.
        - name: Documentation link check
          os: linux
          stage: Final tests
          env: SETUP_CMD='build_docs -b linkcheck'
               MATPLOTLIB_VERSION="<3.1"
               SPHINX_VERSION="<3"
               PIP_DEPENDENCIES="" CONDA_DEPENDENCIES=""
               INSTALL_WITH_PIP=True
               EXTRAS_INSTALL="docs"

        # Also regularly try the big-endian s390 architecture, in the
        # process checking that installing dependencies with apt works.
        - name: big-endian s390 architecture with apt
          arch: s390x
          language: c
          dist: bionic
          stage: Final tests
          env: USE_CI_HELPERS=False APT_DEPENDENCIES="python3-pip python3-dev python3-venv python3-setuptools cython3 ipython3 python3-jinja2 python3-numpy python3-pytest-astropy python3-pytest-cov python3-pytest-xdist python3-pytest-filter-subpackage python3-objgraph python3-coverage python3-attr tzdata"

        # And with an arm64 processor, again with apt for convenience.
        - name: arm64 architecture with apt
          arch: arm64
          language: c
          dist: bionic
          stage: Final tests
          env: USE_CI_HELPERS=False APT_DEPENDENCIES="python3-pip python3-dev python3-venv python3-setuptools cython3 ipython3 python3-jinja2 python3-numpy python3-pytest-astropy python3-pytest-cov python3-pytest-xdist python3-pytest-filter-subpackage python3-objgraph python3-coverage python3-attr tzdata"

        # Regularly make sure that astropy can be used in application bundles
        - language: python
          python: 3.8
          dist: bionic
          name: bundling with pyinstaller
          stage: Cron tests
          env: TOXENV="pyinstaller"

    allow_failures:
      - name: Python 3.7 with remote data and dev version of key dependencies
        os: linux
        stage: Final tests
        env: PYTHON_VERSION=3.7 NUMPY_VERSION=dev SETUP_CMD='test --remote-data'
             CONDA_DEPENDENCIES=''
             PIP_DEPENDENCIES="$DEV_PIP_DEP $ASDF_DEV"
             MATPLOTLIB_VERSION=dev

before_install:

    # We need to use CCOMPILER otherwise Travis overwrites CC if we define it
    # in env: above.
    - if [ ! -z $CCOMPILER ]; then
        export CC=$CCOMPILER;
      fi

     # Check CC variable
    - echo $CC

    # Write configuration items to standard location to make sure they are
    # ignored (the tests will fail if not)
    - mkdir -p $HOME/.astropy/config/
    - printf "unicode_output = True\nmax_width = 500" > $HOME/.astropy/config/astropy.cfg


install:
    - if [[ $USE_CI_HELPERS == True ]]; then
        git clone git://github.com/astropy/ci-helpers.git;
        if [[ $TRAVIS_OS_NAME == osx || $TRAVIS_OS_NAME == windows ]]; then
          source ci-helpers/travis/setup_python.sh;
          pip install $PIP_DEPENDENCIES;
        else
          source ci-helpers/travis/setup_conda.sh;
        fi
      fi
    - if [[ $INSTALL_WITH_PIP == True ]]; then
        if [ -z $EXTRAS_INSTALL ]; then
          pip install -e . ${OTHER_DEPENDENCY_PREFERENCES} ${PIP_FLAGS};
        else
          pip install -e .[$EXTRAS_INSTALL] ${OTHER_DEPENDENCY_PREFERENCES} ${PIP_FLAGS};
        fi
      fi

    # For APT key updates, see https://ftp-master.debian.org/keys.html
    - if [ $TRAVIS_CPU_ARCH == s390x ] || [ $TRAVIS_CPU_ARCH == arm64 ]; then
        curl https://ftp-master.debian.org/keys/archive-key-10.asc | sudo apt-key add -;
        echo "deb http://ftp.us.debian.org/debian testing main" | sudo tee -a /etc/apt/sources.list;
        sudo apt-get -qq update;
        sudo apt-get install -y --no-install-recommends ${APT_DEPENDENCIES};
      fi

script:



script:
    - if [ $TRAVIS_CPU_ARCH != s390x ] && [ $TRAVIS_CPU_ARCH != arm64 ]; then
        $MAIN_CMD $SETUP_CMD;
      else
        python3 -m venv --system-site-packages tests;
        source tests/bin/activate;
        pip3 install -e .[test];
        pytest-3;
      fi

after_success:
    - if [[ $SETUP_CMD == *--coverage* ]]; then
        codecov --gcov-glob "*cextern*";
      fi
